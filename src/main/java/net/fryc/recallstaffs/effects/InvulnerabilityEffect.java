package net.fryc.recallstaffs.effects;

import net.fryc.recallstaffs.util.ServerPlayerGetters;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.attribute.AttributeContainer;
import net.minecraft.entity.effect.StatusEffect;
import net.minecraft.entity.effect.StatusEffectCategory;
import net.minecraft.entity.effect.StatusEffectInstance;
import net.minecraft.entity.effect.StatusEffects;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.util.math.GlobalPos;


public class InvulnerabilityEffect extends StatusEffect {
    protected InvulnerabilityEffect(StatusEffectCategory category, int color) {
        super(category, color);
    }


    public void onRemoved(LivingEntity entity, AttributeContainer attributes, int amplifier) {
        if(entity instanceof ServerPlayerEntity sPlayer){
            GlobalPos pos = ((ServerPlayerGetters) sPlayer).getPositionBeforeUsingRecoveryAltar();
            if(pos != null && sPlayer.getServer() != null){
                // teleporting player back to recovery altar
                sPlayer.teleport(sPlayer.getServer().getWorld(pos.getDimension()), pos.getPos().getX(), pos.getPos().getY(), pos.getPos().getZ(), sPlayer.getYaw(), sPlayer.getPitch());

                // setting recoverys altar position to null
                ((ServerPlayerGetters) sPlayer).setPositionBeforeUsingRecoveryAltar(null);
            }
        }

        // removing invulnerability when not in creative
        if(!(entity instanceof PlayerEntity player && player.getAbilities().creativeMode)) entity.setInvulnerable(false);
        entity.clearStatusEffects();

        super.onRemoved(entity, attributes, amplifier);
    }

    public void onApplied(LivingEntity entity, AttributeContainer attributes, int amplifier) {
        entity.addStatusEffect(new StatusEffectInstance(StatusEffects.FIRE_RESISTANCE, 1000000, 0, false, false, false));
        entity.addStatusEffect(new StatusEffectInstance(StatusEffects.RESISTANCE, 1000000, 98, false, false, false));
        entity.addStatusEffect(new StatusEffectInstance(StatusEffects.INVISIBILITY, 1000000, 0, false, false, false));
        entity.addStatusEffect(new StatusEffectInstance(StatusEffects.WEAKNESS, 1000000, 98, false, false, false));
        entity.addStatusEffect(new StatusEffectInstance(StatusEffects.WATER_BREATHING, 1000000, 0, false, false, false));

        // making player invulnerable
        entity.setInvulnerable(true);

        super.onApplied(entity, attributes, amplifier);
    }

}
